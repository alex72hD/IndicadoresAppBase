@page "/tipoindicador"  
@using System.Collections.Generic  
@using System.Text.Json  
@using Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager  


<PageTitle>Lista de indicadores</PageTitle>

<h1>Indicadores</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nuevo</button>  
</div>

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (indicadores == null || indicadores.Count == 0)
{
    <p>No hay Tipos de indicadores.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tipoindicador in indicadores)
                {
                    <tr>
                        <td>@ObtenerValor(tipoindicador, "id")</td>
                        <td>@ObtenerValor(tipoindicador, "nombre")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(tipoindicador)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(tipoindicador)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (mostrarFormulario)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(modoEdicion ? "Editar" : "Crear") Tipo de Indicador</h5>
                    <button type="button" class="btn-close" @onclick="CerrarFormulario"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="nombre" @bind="indicadorActual.nombre" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarFormulario">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarIndicador">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarConfirmacion)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar el indicador: @indicadorEliminar?.nombre?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarIndicador">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@if (exitoMensaje != null)
{
    <div class="alert alert-success">
        @exitoMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> indicadores = new List<Dictionary<string, object>>();
    private bool cargando = true;
    private string? errorMensaje = null;
    private string? exitoMensaje = null;
    private const string TABLA = "tipoindicador";

    // Variables para el formulario
    private bool mostrarFormulario = false;
    private bool modoEdicion = false;
    private IndicadorModel indicadorActual = new IndicadorModel();

    // Variables para confirmación de eliminación
    private bool mostrarConfirmacion = false;
    private IndicadorModel indicadorEliminar = new IndicadorModel();

    protected override async Task OnInitializedAsync()
    {
        await CargarTipodeIndicadores();
    }

    private async Task CargarTipodeIndicadores()
    {
        cargando = true;
        errorMensaje = null;
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(TABLA);
            
            if (resultado != null)
            {
                indicadores = resultado;
            }
            else
            {
                indicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar Tipos de Indicadores: {ex.Message}";
            indicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null)
            return string.Empty;
            
        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }
        
        return string.Empty;
    }
    private void MostrarFormularioCrear()
    {
        indicadorActual = new IndicadorModel();
        modoEdicion = false;
        mostrarFormulario = true;
    }

    private void MostrarFormularioEditar(Dictionary<string, object> indicador)
    {
        indicadorActual = new IndicadorModel
        {
            id = ObtenerValor(indicador, "id"),
            nombre = ObtenerValor(indicador, "nombre")
        };
        modoEdicion = true;
        mostrarFormulario = true;
    }

    private void CerrarFormulario()
    {
        mostrarFormulario = false;
    }

    private async Task GuardarIndicador()
    {
        errorMensaje = null;
        exitoMensaje = null;

        try
        {
            var indicadorDict = new Dictionary<string, object>
            {
                ["nombre"] = indicadorActual.nombre
            };

            bool resultado;

            if (modoEdicion)
            {
                resultado = await servicioEntidad.ActualizarAsync(
                    TABLA,
                    "id",
                    indicadorActual.id,
                    indicadorDict
                );

                if (resultado)
                {
                    exitoMensaje = "Indicador actualizado correctamente.";
                }
            }
            else
            {
                resultado = await servicioEntidad.CrearAsync(
                    TABLA,
                    indicadorDict
                );

                if (resultado)
                {
                    exitoMensaje = "Indicador creado correctamente.";
                }
            }

            if (resultado)
            {
                await CargarTipodeIndicadores();
                mostrarFormulario = false;
            }
            else
            {
                errorMensaje = "No se pudo guardar el indicador.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al guardar el indicador: {ex.Message}";
        }
    }

    // Funciones para eliminar
    private void ConfirmarEliminar(Dictionary<string, object> indicador)
    {
        indicadorEliminar = new IndicadorModel
        {
            id = ObtenerValor(indicador, "id"),
            nombre = ObtenerValor(indicador, "nombre")
        };
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task EliminarIndicador()
    {
        errorMensaje = null;
        exitoMensaje = null;

        try
        {
            var resultado = await servicioEntidad.EliminarAsync(
                TABLA,
                "id",
                indicadorEliminar.id
            );

            if (resultado)
            {
                exitoMensaje = "Indicador eliminado correctamente.";
                await CargarTipodeIndicadores();
            }
            else
            {
                errorMensaje = "No se pudo eliminar el indicador.";
            }

            mostrarConfirmacion = false;
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar el indicador: {ex.Message}";
        }
    }
    private class IndicadorModel
    {
        public string id { get; set; } = string.Empty;
        public string nombre { get; set; } = string.Empty;
    }
}