@page "/tipoactor"  
@using System.Collections.Generic  
@using System.Text.Json  
@using Services  
@inject ServicioEntidad servicioEntidad  
@inject NavigationManager navegacionManager  


<PageTitle>Lista de tipos de actores</PageTitle>  <!-- Define el título que se mostrará en la pestaña del navegador -->

<h1>actores</h1>  

<div class="mb-3">  <!-- Contenedor con margen inferior (mb-3 es una clase de Bootstrap) -->
    <button class="btn btn-primary">Crear Nuevo</button> 
</div>

<!-- Bloque condicional que muestra un indicador de carga si los datos están cargando -->
<!-- Si no está cargando pero no hay actors o la lista es nula, muestra un mensaje informativo -->
<!-- Si hay actors para mostrar, muestra la tabla -->
@if (cargando)
{
    <p><em>Cargando...</em></p>  <!-- Mensaje de carga con énfasis (cursiva) -->
}
else if (actores == null || actores.Count == 0)
{
    <p>No hay tipos de actores disponible</p>  
}
else
{
    <div class="table-responsive">  <!-- Contenedor que hace que la tabla sea responsive (se pueda desplazar horizontalmente en dispositivos pequeños) -->
        <table class="table table-striped">  <!-- Tabla con estilos de Bootstrap (filas alternas sombreadas) -->
            <thead>  <!-- Encabezado de la tabla -->
                <tr>  <!-- Fila del encabezado -->
                    <th>Código</th>  <!-- Columna para el código del actor -->
                    <th>nombre</th>  <!-- Columna para el nombre del actor -->
                </tr>
            </thead>
            <tbody>  <!-- Cuerpo de la tabla donde se muestran los datos -->
                <!-- Bucle foreach que itera sobre cada actor en la lista -->
                @foreach (var tipoactor in actores)
                {
                    <tr>  <!-- Fila para cada actor -->
                        <td>@ObtenerValor(tipoactor, "id")</td>  <!-- Celda que muestra el código usando el método auxiliar -->
                        <td>@ObtenerValor(tipoactor, "nombre")</td>  <!-- Celda que muestra el nombre usando el método auxiliar -->
                         <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(tipoactor)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(tipoactor)">Eliminar</button>
                         </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (mostrarFormulario)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(modoEdicion ? "Editar" : "Crear") Actor</h5>
                    <button type="button" class="btn-close" @onclick="CerrarFormulario"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">nombre</label>
                        <input type="text" class="form-control" id="nombre" @bind="actorActual.nombre" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarFormulario">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="Guardaractor">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (mostrarConfirmacion)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar el actor: @actorEliminar?.nombre?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminaractor">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@if (exitoMensaje != null)
{
    <div class="alert alert-success">
        @exitoMensaje
    </div>
}

@code {
    // Lista para almacenar los actors que se obtienen de la API
    private List<Dictionary<string, object>> actores = new List<Dictionary<string, object>>();
    
   private bool cargando = true;
    private string? errorMensaje = null;
    private string? exitoMensaje = null;
    private const string TABLA = "tipoactor";

    // Variables para el formulario
    private bool mostrarFormulario = false;
    private bool modoEdicion = false;
    private actorModel actorActual = new actorModel();

    // Variables para confirmación de eliminación
    private bool mostrarConfirmacion = false;
    private actorModel actorEliminar = new actorModel();

    protected override async Task OnInitializedAsync()
    {
        await Cargarunidadmedicion();
    }

    private async Task Cargarunidadmedicion()
    {
        cargando = true;
        errorMensaje = null;
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(TABLA);
            
            if (resultado != null)
            {
                actores = resultado;
            }
            else
            {
                actores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar el actor: {ex.Message}";
            actores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null)
            return string.Empty;
            
        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }
        
        return string.Empty;
    }
    private void MostrarFormularioCrear()
    {
        actorActual = new actorModel();
        modoEdicion = false;
        mostrarFormulario = true;
    }

    private void MostrarFormularioEditar(Dictionary<string, object> actor)
    {
        actorActual = new actorModel
        {
            id = ObtenerValor(actor, "id"),
            nombre = ObtenerValor(actor, "nombre")
        };
        modoEdicion = true;
        mostrarFormulario = true;
    }

    private void CerrarFormulario()
    {
        mostrarFormulario = false;
    }

    private async Task Guardaractor()
    {
        errorMensaje = null;
        exitoMensaje = null;

        try
        {
            var actorDict = new Dictionary<string, object>
            {
                ["nombre"] = actorActual.nombre
            };

            bool resultado;

            if (modoEdicion)
            {
                resultado = await servicioEntidad.ActualizarAsync(
                    TABLA,
                    "id",
                    actorActual.id,
                    actorDict
                );

                if (resultado)
                {
                    exitoMensaje = "Actor actualizada correctamente.";
                }
            }
            else
            {
                resultado = await servicioEntidad.CrearAsync(
                    TABLA,
                    actorDict
                );

                if (resultado)
                {
                    exitoMensaje = "Actor creado correctamente.";
                }
            }

            if (resultado)
            {
                await Cargarunidadmedicion();
                mostrarFormulario = false;
            }
            else
            {
                errorMensaje = "No se pudo guardar el actor.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al guardar el actor: {ex.Message}";
        }
    }
    private void ConfirmarEliminar(Dictionary<string, object> actor)
    {
        actorEliminar = new actorModel
        {
            id = ObtenerValor(actor, "id"),
            nombre = ObtenerValor(actor, "nombre")
        };
        mostrarConfirmacion = true;
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }

    private async Task Eliminaractor()
    {
        errorMensaje = null;
        exitoMensaje = null;

        try
        {
            var resultado = await servicioEntidad.EliminarAsync(
                TABLA,
                "id",
                actorEliminar.id
            );

            if (resultado)
            {
                exitoMensaje = "actor eliminado correctamente.";
                await Cargarunidadmedicion();
            }
            else
            {
                errorMensaje = "No se pudo eliminar wl actor.";
            }

            mostrarConfirmacion = false;
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al eliminar el actor: {ex.Message}";
        }
    }
    private class actorModel
    {
        public string id { get; set; } = string.Empty;
        public string nombre { get; set; } = string.Empty;
    }
}