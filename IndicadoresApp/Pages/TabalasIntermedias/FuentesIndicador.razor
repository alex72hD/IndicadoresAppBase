@page "/FuentesPorIndicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@using IndicadoresApp.ModalGenerico
@inject ServicioEntidad ServicioEntidad  
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Fuentes Por Indicador</PageTitle>

<h1>Fuentes Por Indicador</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nuevo</button>  
</div>

@if (EstamosCargando)
{
    <p><em>Cargando...</em></p>
}
else if (FuentesPorIndicador == null || FuentesPorIndicador.Count == 0)
{
    <p>No hay relaciones entre fuentes e indicadores registradas.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID Fuente</th>
                    <th>ID Indicador</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var relacion in FuentesPorIndicador)
                {
                    <tr>
                        <td>@ObtenerValor(relacion, "fkidfuente")</td>
                        <td>@ObtenerValor(relacion, "fkidindicador")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(relacion)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(relacion)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Modal para crear/editar relación -->
<ModalGenerico @ref="modalFormulario" 
              Id="formModal" 
              Title="@TituloModal" 
              OnSave="GuardarRelacion">
    <BodyContent>
        <div class="mb-3">
            <label for="idFuente" class="form-label">ID Fuente</label>
            <input type="number" class="form-control" id="idFuente" @bind="RelacionActual.IdFuente" />
        </div>
        <div class="mb-3">
            <label for="idIndicador" class="form-label">ID Indicador</label>
            <input type="number" class="form-control" id="idIndicador" @bind="RelacionActual.IdIndicador" />
        </div>
    </BodyContent>
</ModalGenerico>

<!-- Modal para confirmar eliminación -->
<ModalGenerico @ref="modalConfirmacion" 
              Id="confirmModal" 
              Title="Confirmar eliminación" 
              OnSave="EliminarRelacion">
    <BodyContent>
        <p>¿Está seguro que desea eliminar esta relación entre Fuente (ID: @RelacionAEliminar.IdFuente) e Indicador (ID: @RelacionAEliminar.IdIndicador)?</p>
    </BodyContent>
</ModalGenerico>

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger">
        Error: @MensajeError
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success">
        @MensajeExito
    </div>
}

@code {
    private const string NOMBRE_TABLA = "fuentesporindicador";
    
    private List<Dictionary<string, object>> FuentesPorIndicador { get; set; } = new();
    private bool EstamosCargando { get; set; } = true;
    private string? MensajeError { get; set; }
    private string? MensajeExito { get; set; }

    private bool ModoEdicion { get; set; } = false;
    private RelacionModel RelacionActual { get; set; } = new();
    private ModalGenerico? modalFormulario;
    private string TituloModal => $"{(ModoEdicion ? "Editar" : "Crear")} Relación Fuente-Indicador";

    private RelacionModel RelacionAEliminar { get; set; } = new();
    private ModalGenerico? modalConfirmacion;

    protected override async Task OnInitializedAsync()
    {
        await CargarFuentesPorIndicador();
    }

    private async Task CargarFuentesPorIndicador()
    {
        EstamosCargando = true;
        MensajeError = null;
        
        try
        {
            FuentesPorIndicador = await ServicioEntidad.ObtenerTodosAsync(NOMBRE_TABLA) ?? new List<Dictionary<string, object>>();
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al cargar relaciones: {ex.Message}";
            FuentesPorIndicador = new List<Dictionary<string, object>>();
        }
        finally
        {
            EstamosCargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) ? valor?.ToString() ?? string.Empty : string.Empty;
    }

    private async Task MostrarFormularioCrear()
    {
        RelacionActual = new RelacionModel();
        ModoEdicion = false;
        await modalFormulario.ShowModalAsync();
    }

    private async Task MostrarFormularioEditar(Dictionary<string, object> relacion)
    {
        RelacionActual = new RelacionModel
        {
            IdFuente = Convert.ToInt32(ObtenerValor(relacion, "fkidfuente")),
            IdIndicador = Convert.ToInt32(ObtenerValor(relacion, "fkidindicador"))
        };
        ModoEdicion = true;
        await modalFormulario.ShowModalAsync();
    }

    private async Task ConfirmarEliminar(Dictionary<string, object> relacion)
    {
        RelacionAEliminar = new RelacionModel
        {
            IdFuente = Convert.ToInt32(ObtenerValor(relacion, "fkidfuente")),
            IdIndicador = Convert.ToInt32(ObtenerValor(relacion, "fkidindicador"))
        };
        await modalConfirmacion.ShowModalAsync();
    }

    private async Task GuardarRelacion()
     {
        
     }

    private async Task EliminarRelacion()
    {
       
    }

    private class RelacionModel
    {
        public int IdFuente { get; set; }
        public int IdIndicador { get; set; }
    }
}