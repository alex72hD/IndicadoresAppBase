@page "/fuentesporindicador"
@using System.Collections.Generic
@using Services
@inject ServicioEntidad ServicioEntidad
@inject NavigationManager NavigationManager

<PageTitle>Fuentes por Indicador</PageTitle>

<h1>Fuentes por Indicador</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nueva Relación</button>
</div>

@if (EstamosCargando)
{
    <div class="alert alert-info">
        <em>Cargando relaciones...</em>
    </div>
}
else if (Relaciones == null || Relaciones.Count == 0)
{
    <div class="alert alert-warning">
        No hay relaciones registradas
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Indicador</th>
                    <th>Fuente</th>
                    <th class="text-end">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var relacion in Relaciones)
                {
                    <tr>
                        <td>@ObtenerNombreIndicador(relacion.Ridindicador)</td>
                        <td>@ObtenerNombreFuente(relacion.Ridfuente)</td>
                        <td class="text-end">
                            <button class="btn btn-warning btn-sm me-2" 
                                    @onclick="() => MostrarFormularioEditar(relacion)">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" 
                                    @onclick="() => ConfirmarEliminar(relacion)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (MostrarFormulario)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(ModoEdicion ? "Editar" : "Crear") Relación</h5>
                    <button type="button" class="btn-close" @onclick="CerrarFormulario"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Indicador</label>
                        <select class="form-select" @bind="RelacionActual.Ridindicador">
                            <option value="">Seleccione un indicador</option>
                            @if (CargandoIndicadores)
                            {
                                <option disabled>Cargando indicadores...</option>
                            }
                            else
                            {
                                @foreach (var indicador in IndicadoresDisponibles)
                                {
                                    <option value="@indicador.Id">@indicador.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Fuente</label>
                        <select class="form-select" @bind="RelacionActual.Ridfuente">
                            <option value="">Seleccione una fuente</option>
                            @if (CargandoFuentes)
                            {
                                <option disabled>Cargando fuentes...</option>
                            }
                            else
                            {
                                @foreach (var fuente in FuentesDisponibles)
                                {
                                    <option value="@fuente.Id">@fuente.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(MensajeErrorFormulario))
                    {
                        <div class="alert alert-danger mt-2">
                            @MensajeErrorFormulario
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarFormulario">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarRelacion">
                        @(ModoEdicion ? "Actualizar" : "Guardar")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (MostrarConfirmacion)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.4);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro que desea eliminar esta relación?</p>
                    <ul class="list-unstyled">
                        <li><strong>Indicador:</strong> @RelacionEliminar.NombreIndicador</li>
                        <li><strong>Fuente:</strong> @RelacionEliminar.NombreFuente</li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarRelacion">Confirmar Eliminación</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-3">
        @MensajeExito
        <button type="button" class="btn-close" @onclick="() => MensajeExito = null"></button>
    </div>
}

@code {
    // Constantes
    private const string TABLA_RELACIONES = "fuentesporindicador";
    private const string TABLA_INDICADORES = "indicador";
    private const string TABLA_FUENTES = "fuente";
    
    // Estado de la aplicación
    private List<RelacionCompleta> Relaciones { get; set; } = new();
    private List<Indicador> IndicadoresDisponibles { get; set; } = new();
    private List<Fuente> FuentesDisponibles { get; set; } = new();
    private bool EstamosCargando = true;
    private bool CargandoIndicadores = true;
    private bool CargandoFuentes = true;
    
    // Mensajes
    private string? MensajeError;
    private string? MensajeExito;
    private string? MensajeErrorFormulario;
    
    // Control de UI
    private bool MostrarFormulario = false;
    private bool ModoEdicion = false;
    private RelacionActual RelacionActual = new();
    
    // Eliminación
    private bool MostrarConfirmacion = false;
    private RelacionEliminar RelacionEliminar = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
    }

    private async Task CargarDatosIniciales()
    {
        try {
            await Task.WhenAll(
                CargarIndicadores(),
                CargarFuentes(),
                CargarRelaciones()
            );
        }
        catch (Exception ex) {
            MensajeError = $"Error inicial: {ex.Message}";
        }
    }

    private async Task CargarRelaciones()
    {
        EstamosCargando = true;
        try {
            var datos = await ServicioEntidad.ObtenerTodosAsync(TABLA_RELACIONES);
            Relaciones = datos?.Select(d => new RelacionCompleta {
                Id = Convert.ToInt32(ObtenerValor(d, "Rid")),
                Ridindicador = Convert.ToInt32(ObtenerValor(d, "Ridindicador")),
                Ridfuente = Convert.ToInt32(ObtenerValor(d, "Ridfuente"))
            }).ToList() ?? new();
        }
        catch (Exception ex) {
            MensajeError = $"Error cargando relaciones: {ex.Message}";
        }
        finally {
            EstamosCargando = false;
            StateHasChanged();
        }
    }

    private async Task CargarIndicadores()
    {
        CargandoIndicadores = true;
        try {
            var datos = await ServicioEntidad.ObtenerTodosAsync(TABLA_INDICADORES);
            IndicadoresDisponibles = datos?.Select(d => new Indicador {
                Id = Convert.ToInt32(ObtenerValor(d, "id")),
                Nombre = ObtenerValor(d, "nombre")
            }).ToList() ?? new();
        }
        finally {
            CargandoIndicadores = false;
            StateHasChanged();
        }
    }

    private async Task CargarFuentes()
    {
        CargandoFuentes = true;
        try {
            var datos = await ServicioEntidad.ObtenerTodosAsync(TABLA_FUENTES);
            FuentesDisponibles = datos?.Select(d => new Fuente {
                Id = Convert.ToInt32(ObtenerValor(d, "id")),
                Nombre = ObtenerValor(d, "nombre")
            }).ToList() ?? new();
        }
        finally {
            CargandoFuentes = false;
            StateHasChanged();
        }
    }

    private string ObtenerNombreIndicador(int id)
    {
        return IndicadoresDisponibles.FirstOrDefault(i => i.Id == id)?.Nombre ?? "Indicador desconocido";
    }

    private string ObtenerNombreFuente(int id)
    {
        return FuentesDisponibles.FirstOrDefault(f => f.Id == id)?.Nombre ?? "Fuente desconocida";
    }

    private string ObtenerValor(Dictionary<string, object> datos, string clave)
    {
        return datos.TryGetValue(clave, out object? valor) ? valor?.ToString() ?? "" : "";
    }

    private void MostrarFormularioCrear()
    {
        RelacionActual = new RelacionActual();
        ModoEdicion = false;
        MostrarFormulario = true;
        MensajeErrorFormulario = null;
    }

    private void MostrarFormularioEditar(RelacionCompleta relacion)
    {
        RelacionActual = new RelacionActual {
            Id = relacion.Id,
            Ridindicador = relacion.Ridindicador,
            Ridfuente = relacion.Ridfuente
        };
        ModoEdicion = true;
        MostrarFormulario = true;
        MensajeErrorFormulario = null;
    }

    private async Task GuardarRelacion()
    {
        MensajeErrorFormulario = null;
        
        // Validación
        if (RelacionActual.Ridindicador == 0 || RelacionActual.Ridfuente == 0)
        {
            MensajeErrorFormulario = "Debe seleccionar ambos campos";
            return;
        }
        
        // Validar duplicados
        if (Relaciones.Any(r => 
            r.Ridindicador == RelacionActual.Ridindicador && 
            r.Ridfuente == RelacionActual.Ridfuente &&
            r.Id != RelacionActual.Id))
        {
            MensajeErrorFormulario = "Esta relación ya existe";
            return;
        }

        try {
            var datos = new Dictionary<string, object> {
                ["Ridindicador"] = RelacionActual.Ridindicador,
                ["Ridfuente"] = RelacionActual.Ridfuente
            };

            bool resultado;
            
            if (ModoEdicion) {
                resultado = await ServicioEntidad.ActualizarAsync(
                    TABLA_RELACIONES,
                    "Rid",
                    RelacionActual.Id,
                    datos
                );
            } else {
                resultado = await ServicioEntidad.CrearAsync(TABLA_RELACIONES, datos);
            }

            if (resultado) {
                MensajeExito = ModoEdicion 
                    ? "Relación actualizada correctamente" 
                    : "Relación creada exitosamente";
                await CargarRelaciones();
                CerrarFormulario();
            }
        }
        catch (Exception ex) {
            MensajeErrorFormulario = $"Error guardando: {ex.Message}";
        }
    }

    private void ConfirmarEliminar(RelacionCompleta relacion)
    {
        RelacionEliminar = new RelacionEliminar {
            Id = relacion.Id,
            NombreIndicador = ObtenerNombreIndicador(relacion.Ridindicador),
            NombreFuente = ObtenerNombreFuente(relacion.Ridfuente)
        };
        MostrarConfirmacion = true;
    }

    private async Task EliminarRelacion()
    {
        try {
            var resultado = await ServicioEntidad.EliminarAsync(
                TABLA_RELACIONES,
                "Rid",
                RelacionEliminar.Id
            );
            
            if (resultado) {
                MensajeExito = "Relación eliminada correctamente";
                await CargarRelaciones();
                MostrarConfirmacion = false;
            }
        }
        catch (Exception ex) {
            MensajeError = $"Error eliminando: {ex.Message}";
            MostrarConfirmacion = false;
        }
    }

    private void CerrarFormulario()
    {
        MostrarFormulario = false;
        RelacionActual = new RelacionActual();
        MensajeErrorFormulario = null;
    }

    private void CancelarEliminar()
    {
        MostrarConfirmacion = false;
        RelacionEliminar = new RelacionEliminar();
    }

    // Modelos
    private class RelacionCompleta {
        public int Id { get; set; }
        public int Ridindicador { get; set; }
        public int Ridfuente { get; set; }
    }

    private class RelacionActual {
        public int Id { get; set; }
        public int Ridindicador { get; set; }
        public int Ridfuente { get; set; }
    }

    private class RelacionEliminar {
        public int Id { get; set; }
        public string NombreIndicador { get; set; } = "";
        public string NombreFuente { get; set; } = "";
    }

    private class Indicador {
        public int Id { get; set; }
        public string Nombre { get; set; } = "";
    }

    private class Fuente {
        public int Id { get; set; }
        public string Nombre { get; set; } = "";
    }
}