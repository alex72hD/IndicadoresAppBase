@page "/ResponsablePorIndicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@using IndicadoresApp.ModalGenerico
@inject ServicioEntidad ServicioEntidad
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Responsables por indicadores</PageTitle>

<h1>Responsables por indicadores</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Crear Nuevo</button>
</div>

@if (EstamosCargando)
{
    <p><em>Cargando...</em></p>
}
else if (Responsables == null || Responsables.Count == 0)
{
    <p>No hay responsables asignados a indicadores.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID Responsable</th>
                    <th>ID Indicador</th>
                    <th>Fecha de Asignación</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var responsable in Responsables)
                {
                    <tr>
                        <td>@ObtenerValor(responsable, "fkidresponsable")</td>
                        <td>@ObtenerValor(responsable, "fkidindicador")</td>
                        <td>@ObtenerValor(responsable, "fechaasignacion")</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => MostrarFormularioEditar(responsable)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(responsable)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Modal para crear/editar -->
<ModalGenerico @ref="modalFormulario"
              Id="formModal"
              Title="@TituloModal"
              OnSave="GuardarResponsable">
    <BodyContent>
        <div class="mb-3">
            <label for="idResponsable" class="form-label">ID Responsable</label>
            <input type="text" class="form-control" id="idResponsable" @bind="ResponsableActual.FkIdResponsable" />
        </div>
        <div class="mb-3">
            <label for="idIndicador" class="form-label">ID Indicador</label>
            <input type="text" class="form-control" id="idIndicador" @bind="ResponsableActual.FkIdIndicador" />
        </div>
        <div class="mb-3">
            <label for="fechaAsignacion" class="form-label">Fecha de Asignación</label>
            <input type="date" class="form-control" id="fechaAsignacion" 
                   @bind="ResponsableActual.FechaAsignacion" 
                   @bind:format="yyyy-MM-dd" />
        </div>
    </BodyContent>
</ModalGenerico>

<!-- Modal de confirmación -->
<ModalGenerico @ref="modalConfirmacion"
              Id="confirmModal"
              Title="Confirmar eliminación"
              OnSave="EliminarResponsable">
    <BodyContent>
        <p>¿Está seguro que desea eliminar la asignación del responsable 
            @ResponsableAEliminar.FkIdResponsable al indicador 
            @ResponsableAEliminar.FkIdIndicador?</p>
    </BodyContent>
</ModalGenerico>

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger">
        Error: @MensajeError
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success">
        @MensajeExito
    </div>
}

@code {
    private const string NOMBRE_TABLA = "responsablesporindicador";
    
    private List<Dictionary<string, object>> Responsables { get; set; } = new();
    private bool EstamosCargando { get; set; } = true;
    private string MensajeError { get; set; }
    private string MensajeExito { get; set; }

    private bool ModoEdicion { get; set; }
    private ResponsableModel ResponsableActual { get; set; } = new();
    private ModalGenerico modalFormulario;
    private string TituloModal => ModoEdicion ? "Editar Asignación" : "Nueva Asignación";

    private ResponsableModel ResponsableAEliminar { get; set; } = new();
    private ModalGenerico modalConfirmacion;

    protected override async Task OnInitializedAsync()
    {
        await CargarResponsables();
    }

    private async Task CargarResponsables()
    {
        EstamosCargando = true;
        try
        {
            Responsables = await ServicioEntidad.ObtenerTodosAsync(NOMBRE_TABLA) ?? new();
            MensajeError = null;
        }
        catch (Exception ex)
        {
            MensajeError = $"Error al cargar datos: {ex.Message}";
            Responsables = new();
        }
        finally
        {
            EstamosCargando = false;
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario.TryGetValue(clave, out var valor) 
            ? valor?.ToString() ?? string.Empty 
            : string.Empty;
    }

    private async Task MostrarFormularioCrear()
    {
        ResponsableActual = new();
        ModoEdicion = false;
        await modalFormulario.ShowModalAsync();
    }

    private async Task MostrarFormularioEditar(Dictionary<string, object> responsable)
    {
        ResponsableActual = new()
        {
            FkIdResponsable = ObtenerValor(responsable, "fkidresponsable"),
            FkIdIndicador = ObtenerValor(responsable, "fkidindicador"),
            FechaAsignacion = DateTime.Parse(ObtenerValor(responsable, "fechaasignacion"))
        };
        ModoEdicion = true;
        await modalFormulario.ShowModalAsync();
    }

    private async Task ConfirmarEliminar(Dictionary<string, object> responsable)
    {
        ResponsableAEliminar = new()
        {
            FkIdResponsable = ObtenerValor(responsable, "fkidresponsable"),
            FkIdIndicador = ObtenerValor(responsable, "fkidindicador")
        };
        await modalConfirmacion.ShowModalAsync();
    }

    private async Task GuardarResponsable()
    {
        try
        {
            var datos = new Dictionary<string, object>
            {
                ["fkidresponsable"] = ResponsableActual.FkIdResponsable,
                ["fkidindicador"] = ResponsableActual.FkIdIndicador,
                ["fechaasignacion"] = ResponsableActual.FechaAsignacion.ToString("yyyy-MM-dd")
            };

            @* if (ModoEdicion)
            {
                await ServicioEntidad.ActualizarAsync(NOMBRE_TABLA, datos);
            }
            else
            {
                await ServicioEntidad.CrearAsync(NOMBRE_TABLA, datos);
            } *@

            MensajeExito = "Operación realizada correctamente";
            await modalFormulario.HideModalAsync();
            await CargarResponsables();
        }
        catch (Exception ex)
        {
            MensajeError = $"Error: {ex.Message}";
        }
    }

    private async Task EliminarResponsable()
    {
        try
        {
            var datos = new Dictionary<string, object>
            {
                ["fkidresponsable"] = ResponsableAEliminar.FkIdResponsable,
                ["fkidindicador"] = ResponsableAEliminar.FkIdIndicador
            };

            @* await ServicioEntidad.EliminarAsync(NOMBRE_TABLA, datos); *@
            MensajeExito = "Asignación eliminada correctamente";
            await modalConfirmacion.HideModalAsync();
            await CargarResponsables();
        }
        catch (Exception ex)
        {
            MensajeError = $"Error: {ex.Message}";
        }
    }

    private class ResponsableModel
    {
        public string FkIdResponsable { get; set; } = string.Empty;
        public string FkIdIndicador { get; set; } = string.Empty;
        public DateTime FechaAsignacion { get; set; } = DateTime.Today;
    }
}