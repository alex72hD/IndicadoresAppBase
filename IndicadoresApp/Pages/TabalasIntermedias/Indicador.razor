@page "/indicador"
@using System.Collections.Generic
@using Services
@inject ServicioEntidad ServicioEntidad
@inject NavigationManager NavigationManager

<PageTitle>Indicadores</PageTitle>

<h1>Gestión de Indicadores</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="MostrarFormularioCrear">Nuevo Indicador</button>
</div>

@if (EstamosCargando)
{
    <div class="alert alert-info">Cargando indicadores...</div>
}
else if (Indicadores?.Any() != true)
{
    <div class="alert alert-warning">No se encontraron indicadores registrados</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Código</th>
                    <th>Nombre</th>
                    <th>Objetivo</th>
                    <th>Fórmula</th>
                    <th>Unidad</th>
                    <th>Meta</th>
                    <th>Frecuencia</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var indicador in Indicadores)
                {
                    <tr>
                        <td>@ObtenerValor(indicador, "codigo")</td>
                        <td>@ObtenerValor(indicador, "nombre")</td>
                        <td>@ObtenerValor(indicador, "objetivo")</td>
                        <td>@ObtenerValor(indicador, "formula")</td>
                        <td>@ObtenerNombreUnidad(ObtenerValor(indicador, "fkidunidadmedicion"))</td>
                        <td>@ObtenerValor(indicador, "meta")</td>
                        <td>@ObtenerNombreFrecuencia(ObtenerValor(indicador, "fkidfrecuencia"))</td>
                        <td class="text-center">
                            <div class="btn-group">
                                <button class="btn btn-sm btn-outline-warning" 
                                        @onclick="() => MostrarFormularioEditar(indicador)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" 
                                        @onclick="() => ConfirmarEliminar(indicador)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Modal Formulario -->
<div class="modal @(MostrarFormulario ? "d-block" : "d-none")" style="background-color: rgba(0,0,0,0.5)">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">@(ModoEdicion ? "Editar" : "Nuevo") Indicador</h5>
                <button type="button" class="btn-close btn-close-white" @onclick="CerrarFormulario"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Código *</label>
                            <input type="text" class="form-control" 
                                   @bind="IndicadorActual.Codigo" 
                                   required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nombre *</label>
                            <input type="text" class="form-control" 
                                   @bind="IndicadorActual.Nombre" 
                                   required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Unidad de Medición *</label>
                            <select class="form-select" @bind="IndicadorActual.UnidadMedicionId">
                                <option value="">Seleccionar...</option>
                                @foreach (var unidad in UnidadesMedicion)
                                {
                                    <option value="@unidad.Id">@unidad.Nombre</option>
                                }
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Fórmula</label>
                            <input type="text" class="form-control" 
                                   @bind="IndicadorActual.Formula" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Meta</label>
                            <input type="text" class="form-control" 
                                   @bind="IndicadorActual.Meta" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Frecuencia *</label>
                            <select class="form-select" @bind="IndicadorActual.FrecuenciaId">
                                <option value="">Seleccionar...</option>
                                @foreach (var freq in Frecuencias)
                                {
                                    <option value="@freq.Id">@freq.Nombre</option>
                                }
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-12">
                        <div class="mb-3">
                            <label class="form-label">Objetivo</label>
                            <textarea class="form-control" rows="3" 
                                      @bind="IndicadorActual.Objetivo"></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Alcance</label>
                            <textarea class="form-control" rows="3" 
                                      @bind="IndicadorActual.Alcance"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" 
                        @onclick="CerrarFormulario">Cancelar</button>
                <button type="button" class="btn btn-primary" 
                        @onclick="GuardarIndicador">
                    @(ModoEdicion ? "Actualizar" : "Guardar")
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Confirmación -->
<div class="modal @(MostrarConfirmacion ? "d-block" : "d-none")" style="background-color: rgba(0,0,0,0.5)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirmar Eliminación</h5>
                <button type="button" class="btn-close btn-close-white" 
                        @onclick="CancelarEliminar"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de eliminar el indicador <strong>@IndicadorEliminar.Nombre</strong>?</p>
                <p class="text-danger small">Esta acción eliminará todas las relaciones asociadas y no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" 
                        @onclick="CancelarEliminar">Cancelar</button>
                <button type="button" class="btn btn-danger" 
                        @onclick="EliminarIndicador">Confirmar Eliminación</button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(MensajeError))
{
    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
        @MensajeError
        <button type="button" class="btn-close" 
                @onclick="() => MensajeError = null"></button>
    </div>
}

@if (!string.IsNullOrEmpty(MensajeExito))
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @MensajeExito
        <button type="button" class="btn-close" 
                @onclick="() => MensajeExito = null"></button>
    </div>
}

@code {
    private const string NOMBRE_TABLA = "indicador";
    private const string TABLA_RELACIONES = "responsablesporindicador";
    private const string CAMPO_INDICADOR_RELACION = "fkidindicador";
    
    private List<Dictionary<string, object>> Indicadores = new();
    private bool EstamosCargando = true;
    private string MensajeError;
    private string MensajeExito;

    // Entidades relacionadas
    private List<EntidadSelect> UnidadesMedicion = new();
    private List<EntidadSelect> Frecuencias = new();

    // Control de UI
    private bool MostrarFormulario = false;
    private bool ModoEdicion = false;
    private bool MostrarConfirmacion = false;
    
    // Modelos
    private IndicadorModel IndicadorActual = new();
    private IndicadorModel IndicadorEliminar = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosIniciales();
        await CargarEntidadesRelacionadas();
    }

    private async Task CargarDatosIniciales()
    {
        try
        {
            EstamosCargando = true;
            var resultado = await ServicioEntidad.ObtenerTodosAsync(NOMBRE_TABLA);
            Indicadores = resultado?.ToList() ?? new();
            MensajeError = null;
        }
        catch (Exception ex)
        {
            ManejarError($"Error cargando indicadores: {ex.Message}");
        }
        finally
        {
            EstamosCargando = false;
            StateHasChanged();
        }
    }

    private async Task CargarEntidadesRelacionadas()
    {
        try
        {
            var cargarUnidades = CargarOpcionesFK("unidadmedicion");
            var cargarFrecuencias = CargarOpcionesFK("frecuencia");
            
            await Task.WhenAll(cargarUnidades, cargarFrecuencias);
            
            UnidadesMedicion = await cargarUnidades;
            Frecuencias = await cargarFrecuencias;
        }
        catch (Exception ex)
        {
            ManejarError($"Error cargando datos relacionados: {ex.Message}");
        }
    }

    private async Task<List<EntidadSelect>> CargarOpcionesFK(string tabla)
    {
        try
        {
            var datos = await ServicioEntidad.ObtenerTodosAsync(tabla);
            return datos?
                .Select(d => new EntidadSelect {
                    Id = ObtenerValor(d, "id"),
                    Nombre = ObtenerValor(d, "nombre") })
                .ToList() ?? new();
        }
        catch
        {
            return new List<EntidadSelect>();
        }
    }

    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        return diccionario?.TryGetValue(clave, out var valor) == true 
            ? valor?.ToString() ?? string.Empty 
            : string.Empty;
    }

    private string ObtenerNombreUnidad(string id)
    {
        return UnidadesMedicion.FirstOrDefault(u => u.Id == id)?.Nombre ?? "N/A";
    }

    private string ObtenerNombreFrecuencia(string id)
    {
        return Frecuencias.FirstOrDefault(f => f.Id == id)?.Nombre ?? "N/A";
    }

    private void MostrarFormularioCrear()
    {
        IndicadorActual = new();
        ModoEdicion = false;
        MostrarFormulario = true;
    }

    private void MostrarFormularioEditar(Dictionary<string, object> indicador)
    {
        try
        {
            IndicadorActual = new()
            {
                Id = ObtenerValor(indicador, "id"),
                Codigo = ObtenerValor(indicador, "codigo"),
                Nombre = ObtenerValor(indicador, "nombre"),
                Objetivo = ObtenerValor(indicador, "objetivo"),
                Alcance = ObtenerValor(indicador, "alcance"),
                Formula = ObtenerValor(indicador, "formula"),
                Meta = ObtenerValor(indicador, "meta"),
                UnidadMedicionId = ObtenerValor(indicador, "fkidunidadmedicion"),
                FrecuenciaId = ObtenerValor(indicador, "fkidfrecuencia")
            };
            ModoEdicion = true;
            MostrarFormulario = true;
        }
        catch (Exception ex)
        {
            ManejarError($"Error preparando edición: {ex.Message}");
        }
    }

    private async Task GuardarIndicador()
    {
        MensajeError = null;
        MensajeExito = null;

        if (!ValidarFormulario()) return;

        var datos = new Dictionary<string, object>
        {
            ["codigo"] = IndicadorActual.Codigo,
            ["nombre"] = IndicadorActual.Nombre,
            ["objetivo"] = IndicadorActual.Objetivo,
            ["alcance"] = IndicadorActual.Alcance,
            ["formula"] = IndicadorActual.Formula,
            ["meta"] = IndicadorActual.Meta,
            ["fkidunidadmedicion"] = IndicadorActual.UnidadMedicionId,
            ["fkidfrecuencia"] = IndicadorActual.FrecuenciaId
        };

        try
        {
            bool exito;
            
            if (ModoEdicion)
            {
                exito = await ServicioEntidad.ActualizarAsync(
                    NOMBRE_TABLA,
                    "id",
                    IndicadorActual.Id,
                    datos
                );
            }
            else
            {
                exito = await ServicioEntidad.CrearAsync(NOMBRE_TABLA, datos);
            }

            if (exito)
            {
                MensajeExito = $"Indicador {(ModoEdicion ? "actualizado" : "creado")} correctamente";
                await CargarDatosIniciales();
                MostrarFormulario = false;
            }
            else
            {
                MensajeError = "Operación no realizada. Verifique los datos.";
            }
        }
        catch (Exception ex)
        {
            ManejarError($"Error guardando indicador: {ex.Message}");
        }
    }

    private bool ValidarFormulario()
    {
        var errores = new List<string>();
        
        if (string.IsNullOrWhiteSpace(IndicadorActual.Codigo))
            errores.Add("Código es requerido");
        
        if (string.IsNullOrWhiteSpace(IndicadorActual.Nombre))
            errores.Add("Nombre es requerido");
        
        if (string.IsNullOrWhiteSpace(IndicadorActual.UnidadMedicionId))
            errores.Add("Debe seleccionar una unidad de medición");
        
        if (string.IsNullOrWhiteSpace(IndicadorActual.FrecuenciaId))
            errores.Add("Debe seleccionar una frecuencia");

        if (errores.Any())
        {
            MensajeError = string.Join(" • ", errores);
            return false;
        }
        return true;
    }

    private void ConfirmarEliminar(Dictionary<string, object> indicador)
    {
        IndicadorEliminar = new()
        {
            Id = ObtenerValor(indicador, "id"),
            Nombre = ObtenerValor(indicador, "nombre")
        };
        MostrarConfirmacion = true;
    }

    private async Task EliminarIndicador()
    {
        try
        {
            // Eliminar relaciones primero
            var exitoRelaciones = await ServicioEntidad.EliminarAsync(
                TABLA_RELACIONES,
                CAMPO_INDICADOR_RELACION,
                IndicadorEliminar.Id
            );

            if (!exitoRelaciones)
            {
                ManejarError("No se pudieron eliminar las relaciones");
                return;
            }

            // Eliminar indicador
            var exito = await ServicioEntidad.EliminarAsync(
                NOMBRE_TABLA,
                "id",
                IndicadorEliminar.Id
            );

            if (exito)
            {
                MensajeExito = "Indicador eliminado con éxito";
                await CargarDatosIniciales();
                MostrarConfirmacion = false;
            }
            else
            {
                ManejarError("No se pudo eliminar el indicador");
            }
        }
        catch (Exception ex)
        {
            ManejarError($"Error eliminando: {ex.Message}");
        }
    }

    private void CerrarFormulario() => MostrarFormulario = false;
    private void CancelarEliminar() => MostrarConfirmacion = false;
    
    private void ManejarError(string mensaje)
    {
        MensajeError = mensaje;
        MensajeExito = null;
        StateHasChanged();
    }

    private class IndicadorModel
    {
        public string Id { get; set; } = string.Empty;
        public string Codigo { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
        public string Objetivo { get; set; } = string.Empty;
        public string Alcance { get; set; } = string.Empty;
        public string Formula { get; set; } = string.Empty;
        public string Meta { get; set; } = string.Empty;
        public string UnidadMedicionId { get; set; } = string.Empty;
        public string FrecuenciaId { get; set; } = string.Empty;
    }

    private class EntidadSelect
    {
        public string Id { get; set; } = string.Empty;
        public string Nombre { get; set; } = string.Empty;
    }
}